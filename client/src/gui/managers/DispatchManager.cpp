//---------------------------------------------------------------------------////    This file is part of Chat Informer project//    Copyright (C) 2011, 2013 Ilya Golovenko////---------------------------------------------------------------------------// Application headers#include <informer/managers/DispatchManager.h>CDispatchManager::CDispatchManager() :    m_messageHook(NULL){    m_mainThreadID = ::GetCurrentThreadId();}CDispatchManager::~CDispatchManager(){    if(NULL != m_messageHook)        ::UnhookWindowsHookEx(m_messageHook);}void CDispatchManager::Initialize(){    m_messageHook = ::SetWindowsHookEx(WH_GETMESSAGE, GetMsgProc, 0, m_mainThreadID);    if(NULL == m_messageHook)        throw std::runtime_error("cannot create message hook");}void CDispatchManager::Finalize(){    if(NULL != m_messageHook)    {        ::UnhookWindowsHookEx(m_messageHook);        m_messageHook = NULL;    }}void CDispatchManager::PostDispatchNotification(){    ::PostThreadMessage(m_mainThreadID, WM_DISPATCH_HANDLER, 0, reinterpret_cast<LPARAM>(this));}void CDispatchManager::ProcessDispatchedHandlers(){    m_service.reset();    m_service.poll();}LRESULT CALLBACK CDispatchManager::GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam){    if(HC_ACTION == nCode && NULL != lParam)    {        PMSG pMsg = reinterpret_cast<PMSG>(lParam);        if(WM_DISPATCH_HANDLER == pMsg->message && NULL != pMsg->lParam)            reinterpret_cast<CDispatchManager*>(pMsg->lParam)->ProcessDispatchedHandlers();    }    return ::CallNextHookEx(0, nCode, wParam, lParam);}